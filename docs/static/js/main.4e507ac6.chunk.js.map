{"version":3,"sources":["components/Messages.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Messages","_this","this","messages","props","react_default","a","createElement","className","map","m","renderMessage","message","member","text","currentMember","messageFromMe","id","key","Math","random","style","backgroundColor","color","username","Component","Input","state","e","setState","target","value","preventDefault","onSendMessage","_this2","onSubmit","onChange","type","placeholder","autoFocus","randomName","adjectives","nouns","floor","length","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toString","drone","publish","room","window","Scaledrone","data","on","error","console","objectSpread","clientId","subscribe","push","components_Messages","components_Input","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAqCeA,0LAjCJ,IAAAC,EAAAC,KACAC,EAAYD,KAAKE,MAAjBD,SACP,OACEE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACXL,EAASM,IAAI,SAAAC,GAAC,OAAIT,EAAKU,cAAcD,4CAK9BE,GAAS,IACdC,EAAgBD,EAAhBC,OAAQC,EAAQF,EAARE,KACRC,EAAiBb,KAAKE,MAAtBW,cACDC,EAAgBH,EAAOI,KAAOF,EAAcE,GAC5CC,EAAMC,KAAKC,SACXZ,EAAYQ,EAChB,iCAAmC,mBACrC,OACEX,EAAAC,EAAAC,cAAA,MAAIW,IAAKA,EAAKV,UAAWA,GACzBH,EAAAC,EAAAC,cAAA,QACEC,UAAU,SACVa,MAAO,CAACC,gBAAiBT,EAAOU,SAEhClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZK,EAAOW,UAEVnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQM,YA3BVW,cCiCRC,6MAhCbC,MAAQ,CACNb,KAAM,4EAGCc,GACP1B,KAAK2B,SAAS,CAACf,KAAMc,EAAEE,OAAOC,yCAGvBH,GACPA,EAAEI,iBACF9B,KAAK2B,SAAS,CAACf,KAAM,KACrBZ,KAAKE,MAAM6B,cAAc/B,KAAKyB,MAAMb,uCAG7B,IAAAoB,EAAAhC,KACP,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAM4B,SAAU,SAAAP,GAAC,OAAIM,EAAKC,SAASP,KACjCvB,EAAAC,EAAAC,cAAA,SACE6B,SAAU,SAAAR,GAAC,OAAIM,EAAKE,SAASR,IAC7BG,MAAO7B,KAAKyB,MAAMb,KAClBuB,KAAK,OACLC,YAAY,oCACZC,WAAW,IAEblC,EAAAC,EAAAC,cAAA,+BA1BUkB,aCEpB,SAASe,IACP,IAAMC,EAAa,CACjB,QAAS,UAAW,QAAS,QAAS,SAAU,QAAS,MAAO,OAChE,SAAU,QAAS,WAAY,QAAS,QAAS,OAAQ,SAAU,SACnE,UAAW,WAAY,OAAQ,UAAW,QAAS,YAAa,OAChE,YAAa,SAAU,OAAQ,OAAQ,UAAW,SAAU,QAAS,OACrE,OAAQ,YAAa,OAAQ,SAAU,UAAW,QAAS,MAAO,MAClE,QAAS,SAAU,QAAS,YAAa,YAAa,MAAO,YAC7D,WAAY,OAAQ,QAAS,QAAS,OAAQ,WAAY,WAC1D,OAAQ,QAAS,QAAS,SAAU,WAAY,SAAU,WAC1D,UAAW,SAAU,SAAU,YAE3BC,EAAQ,CACZ,QAAS,UAAW,QAAS,UAAW,SAAU,UAAW,QAAS,MACtE,QAAS,SAAU,SAAU,MAAO,OAAQ,MAAO,MAAO,MAC1D,SAAU,OAAQ,UAAW,UAAW,UAAW,UAAW,OAAQ,OACtE,QAAS,QAAS,OAAQ,YAAa,SAAU,QAAS,OAAQ,UAClE,OAAQ,UAAW,UAAW,SAAU,UAAW,QAAS,WAC5D,QAAS,QAAS,OAAQ,UAAW,QAAS,QAAS,OACvD,QAAS,QAAS,QAAS,UAAW,UAAW,OAAQ,aACzD,YAAa,YAAa,MAAO,UAAW,OAAQ,SAAU,WAAY,WAAY,UACtF,QAAS,WAIX,OAFkBD,EAAWtB,KAAKwB,MAAMxB,KAAKC,SAAWqB,EAAWG,SACtDF,EAAMvB,KAAKwB,MAAMxB,KAAKC,SAAWsB,EAAME,aAwEvCC,cA/Cb,SAAAA,IAAc,IAAA5C,EAAA,OAAA6C,OAAAC,EAAA,EAAAD,CAAA5C,KAAA2C,IACZ5C,EAAA6C,OAAAE,EAAA,EAAAF,CAAA5C,KAAA4C,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAhD,QAjBFyB,MAAQ,CACNxB,SAAU,CACR,CACEW,KAAM,0BACND,OAAQ,CACNU,MAAO,OACPC,SAAU,cAIhBX,OAAQ,CACNW,SAAUgB,IACVjB,MAhBG,IAAMJ,KAAKwB,MAAsB,SAAhBxB,KAAKC,UAAqB+B,SAAS,MAoB7ClD,EAsCdgC,cAAgB,SAACrB,GACfX,EAAKmD,MAAMC,QAAQ,CACjBC,KAAM,kBACN1C,aAvCFX,EAAKmD,MAAQ,IAAIG,OAAOC,WAAW,mBAAoB,CACrDC,KAAMxD,EAAK0B,MAAMd,SAEnBZ,EAAKmD,MAAMM,GAAG,OAAQ,SAAAC,GACpB,GAAIA,EACF,OAAOC,QAAQD,MAAMA,GAEvB,IAAM9C,EAAMiC,OAAAe,EAAA,EAAAf,CAAA,GAAO7C,EAAK0B,MAAMd,QAC9BA,EAAOI,GAAKhB,EAAKmD,MAAMU,SACvB7D,EAAK4B,SAAS,CAAChB,aAEJZ,EAAKmD,MAAMW,UAAU,mBAC7BL,GAAG,OAAQ,SAACD,EAAM5C,GACrB,IAAMV,EAAWF,EAAK0B,MAAMxB,SAC5BA,EAAS6D,KAAK,CAACnD,SAAQC,KAAM2C,IAC7BxD,EAAK4B,SAAS,CAAC1B,eAjBLF,wEAsBZ,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,0BAEFF,EAAAC,EAAAC,cAAC0D,EAAD,CACE9D,SAAUD,KAAKyB,MAAMxB,SACrBY,cAAeb,KAAKyB,MAAMd,SAE5BR,EAAAC,EAAAC,cAAC2D,EAAD,CACEjC,cAAe/B,KAAK+B,wBAjDZR,aCzBE0C,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4e507ac6.chunk.js","sourcesContent":["import {Component} from \"react\";\nimport React from \"react\";\n\nclass Messages extends Component {\n  render() {\n    const {messages} = this.props;\n    return (\n      <ul className=\"Messages-list\">\n        {messages.map(m => this.renderMessage(m))}\n      </ul>\n    );\n  }\n\n  renderMessage(message) {\n    const {member, text} = message;\n    const {currentMember} = this.props;\n    const messageFromMe = member.id === currentMember.id;\n    const key = Math.random();\n    const className = messageFromMe ?\n      \"Messages-message currentMember\" : \"Messages-message\";\n    return (\n      <li key={key} className={className}>\n      <span\n        className=\"avatar\"\n        style={{backgroundColor: member.color}}\n      />\n        <div className=\"Message-content\">\n          <div className=\"username\">\n            {member.username}\n          </div>\n          <div className=\"text\">{text}</div>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default Messages;\n","import {Component} from \"react\";\nimport React from \"react\";\n\nclass Input extends Component {\n  state = {\n    text: \"\"\n  }\n\n  onChange(e) {\n    this.setState({text: e.target.value});\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.setState({text: \"\"});\n    this.props.onSendMessage(this.state.text);\n  }\n\n  render() {\n    return (\n      <div className=\"Input\">\n        <form onSubmit={e => this.onSubmit(e)}>\n          <input\n            onChange={e => this.onChange(e)}\n            value={this.state.text}\n            type=\"text\"\n            placeholder=\"Type your message and press ENTER\"\n            autoFocus={true}\n          />\n          <button>Send</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Messages from \"./components/Messages\";\nimport Input from \"./components/Input\";\n\nfunction randomName() {\n  const adjectives = [\n    \"saggy\", \"sparkly\", \"still\", \"misty\", \"silent\", \"empty\", \"dry\", \"dark\",\n    \"summer\", \"spicy\", \"delicate\", \"quiet\", \"white\", \"cool\", \"spring\", \"winter\",\n    \"falling\", \"twilight\", \"dawn\", \"crimson\", \"wispy\", \"weathered\", \"blue\",\n    \"billowing\", \"broken\", \"cold\", \"damp\", \"patient\", \"frosty\", \"green\", \"long\",\n    \"late\", \"lingering\", \"bold\", \"little\", \"morning\", \"muddy\", \"old\", \"red\",\n    \"rough\", \"bitter\", \"small\", \"sparkling\", \"throbbing\", \"shy\", \"wandering\",\n    \"withered\", \"wild\", \"black\", \"young\", \"holy\", \"solitary\", \"fragrant\",\n    \"aged\", \"snowy\", \"proud\", \"floral\", \"restless\", \"divine\", \"polished\",\n    \"ancient\", \"purple\", \"lively\", \"nameless\"\n  ];\n  const nouns = [\n    \"whale\", \"dolphin\", \"tiger\", \"raccoon\", \"beluga\", \"axolotl\", \"sloth\", \"fox\",\n    \"snail\", \"turtle\", \"wombat\", \"pig\", \"dodo\", \"bat\", \"dog\", \"cat\",\n    \"monkey\", \"fish\", \"chicken\", \"leopard\", \"ostrich\", \"meerkat\", \"boar\", \"bear\",\n    \"horse\", \"mouse\", \"lion\", \"chameleon\", \"lizard\", \"squid\", \"crab\", \"octopus\",\n    \"dove\", \"peacock\", \"seagull\", \"quokka\", \"pelican\", \"crane\", \"elephant\",\n    \"hyena\", \"sheep\", \"goat\", \"buffalo\", \"zebra\", \"okapi\", \"crow\",\n    \"heron\", \"snake\", \"hippo\", \"gorilla\", \"giraffe\", \"deer\", \"rhinoceros\",\n    \"alligator\", \"crocodile\", \"ant\", \"panther\", \"slug\", \"spider\", \"stingray\", \"porpoise\", \"manatee\",\n    \"koala\", \"sealion\"\n  ];\n  const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const noun = nouns[Math.floor(Math.random() * nouns.length)];\n  return adjective + noun;\n}\n\nfunction randomColor() {\n  return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16);\n}\n\nclass App extends Component {\n  state = {\n    messages: [\n      {\n        text: \"This is a test message!\",\n        member: {\n          color: \"blue\",\n          username: \"bluemoon\"\n        }\n      }\n    ],\n    member: {\n      username: randomName(),\n      color: randomColor()\n    }\n  }\n\n  constructor() {\n    super();\n    this.drone = new window.Scaledrone(\"GjKQrO53UKlC0CYI\", {\n      data: this.state.member\n    });\n    this.drone.on('open', error => {\n      if (error) {\n        return console.error(error);\n      }\n      const member = {...this.state.member};\n      member.id = this.drone.clientId;\n      this.setState({member});\n    });\n    const room = this.drone.subscribe(\"observable-room\");\n    room.on('data', (data, member) => {\n      const messages = this.state.messages;\n      messages.push({member, text: data});\n      this.setState({messages});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>My Chat App</h1>\n        </div>\n        <Messages\n          messages={this.state.messages}\n          currentMember={this.state.member}\n        />\n        <Input\n          onSendMessage={this.onSendMessage}\n        />\n      </div>\n    );\n  }\n\n  onSendMessage = (message) => {\n    this.drone.publish({\n      room: \"observable-room\",\n      message\n    });\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}